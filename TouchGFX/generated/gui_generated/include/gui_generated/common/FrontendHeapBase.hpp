/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef FRONTENDHEAPBASE_HPP
#define FRONTENDHEAPBASE_HPP

#include <common/Meta.hpp>
#include <common/Partition.hpp>
#include <mvp/MVPHeap.hpp>

#include <touchgfx/transitions/NoTransition.hpp>
#include <gui/common/FrontendApplication.hpp>
#include <gui/model/Model.hpp>

#include <gui/mainmenuscreen_screen/MainMenuScreenView.hpp>
#include <gui/mainmenuscreen_screen/MainMenuScreenPresenter.hpp>
#include <gui/gamescreen_screen/GameScreenView.hpp>
#include <gui/gamescreen_screen/GameScreenPresenter.hpp>
#include <gui/backupscreen_screen/BackUpScreenView.hpp>
#include <gui/backupscreen_screen/BackUpScreenPresenter.hpp>
#include <gui/character_screen/CharacterView.hpp>
#include <gui/character_screen/CharacterPresenter.hpp>
#include <gui/character_2_screen/Character_2View.hpp>
#include <gui/character_2_screen/Character_2Presenter.hpp>
#include <gui/rewardscreen_screen/RewardScreenView.hpp>
#include <gui/rewardscreen_screen/RewardScreenPresenter.hpp>
#include <gui/sakuramainscreen_screen/SakuraMainScreenView.hpp>
#include <gui/sakuramainscreen_screen/SakuraMainScreenPresenter.hpp>
#include <gui/sakuragamescreen_screen/SakuraGameScreenView.hpp>
#include <gui/sakuragamescreen_screen/SakuraGameScreenPresenter.hpp>
#include <gui/narutogamescreen2_screen/NarutoGameScreen2View.hpp>
#include <gui/narutogamescreen2_screen/NarutoGameScreen2Presenter.hpp>
#include <gui/character1_screen/Character1View.hpp>
#include <gui/character1_screen/Character1Presenter.hpp>
#include <gui/sakurafinalscreen_screen/SakuraFinalScreenView.hpp>
#include <gui/sakurafinalscreen_screen/SakuraFinalScreenPresenter.hpp>
#include <gui/rewardfinalscreen_screen/RewardFinalScreenView.hpp>
#include <gui/rewardfinalscreen_screen/RewardFinalScreenPresenter.hpp>
#include <gui/character_final_screen/Character_FinalView.hpp>
#include <gui/character_final_screen/Character_FinalPresenter.hpp>
#include <gui/sponge_screen/SpongeView.hpp>
#include <gui/sponge_screen/SpongePresenter.hpp>


/**
 * This class provides the memory that shall be used for memory allocations
 * in the frontend. A single instance of the FrontendHeap is allocated once (in heap
 * memory), and all other frontend objects such as views, presenters and data model are
 * allocated within the scope of this FrontendHeap. As such, the RAM usage of the entire
 * user interface is sizeof(FrontendHeap).
 *
 * @note The FrontendHeap reserves memory for the most memory-consuming presenter and
 * view only. The largest of these classes are determined at compile-time using template
 * magic. As such, it is important to add all presenters, views and transitions to the
 * type lists in this class.
 *
 */
class FrontendHeapBase : public touchgfx::MVPHeap
{
public:
    /**
     * A list of all view types. Must end with meta::Nil.
     * @note All view types used in the application MUST be added to this list!
     */
    typedef touchgfx::meta::TypeList< MainMenuScreenView,
            touchgfx::meta::TypeList< GameScreenView,
            touchgfx::meta::TypeList< BackUpScreenView,
            touchgfx::meta::TypeList< CharacterView,
            touchgfx::meta::TypeList< Character_2View,
            touchgfx::meta::TypeList< RewardScreenView,
            touchgfx::meta::TypeList< SakuraMainScreenView,
            touchgfx::meta::TypeList< SakuraGameScreenView,
            touchgfx::meta::TypeList< NarutoGameScreen2View,
            touchgfx::meta::TypeList< Character1View,
            touchgfx::meta::TypeList< SakuraFinalScreenView,
            touchgfx::meta::TypeList< RewardFinalScreenView,
            touchgfx::meta::TypeList< Character_FinalView,
            touchgfx::meta::TypeList< SpongeView,
            touchgfx::meta::Nil > > > > > > > > > > > > >
            > GeneratedViewTypes;

    /**
     * Determine (compile time) the View type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedViewTypes >::type MaxGeneratedViewType;

    /**
     * A list of all presenter types. Must end with meta::Nil.
     * @note All presenter types used in the application MUST be added to this list!
     */
    typedef touchgfx::meta::TypeList< MainMenuScreenPresenter,
            touchgfx::meta::TypeList< GameScreenPresenter,
            touchgfx::meta::TypeList< BackUpScreenPresenter,
            touchgfx::meta::TypeList< CharacterPresenter,
            touchgfx::meta::TypeList< Character_2Presenter,
            touchgfx::meta::TypeList< RewardScreenPresenter,
            touchgfx::meta::TypeList< SakuraMainScreenPresenter,
            touchgfx::meta::TypeList< SakuraGameScreenPresenter,
            touchgfx::meta::TypeList< NarutoGameScreen2Presenter,
            touchgfx::meta::TypeList< Character1Presenter,
            touchgfx::meta::TypeList< SakuraFinalScreenPresenter,
            touchgfx::meta::TypeList< RewardFinalScreenPresenter,
            touchgfx::meta::TypeList< Character_FinalPresenter,
            touchgfx::meta::TypeList< SpongePresenter,
            touchgfx::meta::Nil > > > > > > > > > > > > >
            > GeneratedPresenterTypes;

    /**
     * Determine (compile time) the Presenter type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedPresenterTypes >::type MaxGeneratedPresenterType;

    /**
     * A list of all transition types. Must end with meta::Nil.
     * @note All transition types used in the application MUST be added to this list!
     */
    typedef touchgfx::meta::TypeList< touchgfx::NoTransition,
            touchgfx::meta::Nil
            > GeneratedTransitionTypes;

    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoMainMenuScreenScreenNoTransition();
    }
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
        : MVPHeap(presenters, views, transitions, app)
    {

    }

};

#endif // FRONTENDHEAPBASE_HPP
