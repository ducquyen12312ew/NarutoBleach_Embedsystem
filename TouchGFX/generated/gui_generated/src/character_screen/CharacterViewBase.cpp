/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/character_screen/CharacterViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

CharacterViewBase::CharacterViewBase() :
    flexButtonCallback(this, &CharacterViewBase::flexButtonCallbackHandler)
{
    __background.setPosition(0, 0, 240, 320);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    background.setBitmap(touchgfx::Bitmap(BITMAP_PICK_ID));
    background.setPosition(0, 0, 240, 320);
    background.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(background);

    naruto.setBitmap(touchgfx::Bitmap(BITMAP_NAGUTO_ID));
    naruto.setPosition(62, 76, 110, 160);
    naruto.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(naruto);

    sponge.setBitmap(touchgfx::Bitmap(BITMAP_SPONGE_ID));
    sponge.setPosition(57, 65, 132, 185);
    sponge.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    sponge.setVisible(false);
    add(sponge);

    sakura.setBitmap(touchgfx::Bitmap(BITMAP_SAKURA_ID));
    sakura.setPosition(62, 67, 116, 178);
    sakura.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    sakura.setVisible(false);
    add(sakura);

    sakura_lock.setBitmap(touchgfx::Bitmap(BITMAP_SAKURA_LOCK_ID));
    sakura_lock.setPosition(62, 67, 116, 178);
    sakura_lock.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    sakura_lock.setVisible(false);
    add(sakura_lock);

    sponge_lock.setBitmap(touchgfx::Bitmap(BITMAP_SPONG_LOCK_ID));
    sponge_lock.setPosition(62, 67, 116, 178);
    sponge_lock.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    sponge_lock.setVisible(false);
    add(sponge_lock);

    rightarrow.setBitmap(touchgfx::Bitmap(BITMAP_RIGHTARROW_ID));
    rightarrow.setPosition(197, 135, 42, 54);
    rightarrow.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(rightarrow);

    leftarrow.setBitmap(touchgfx::Bitmap(BITMAP_LEFTARROW_ID));
    leftarrow.setPosition(0, 135, 42, 54);
    leftarrow.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(leftarrow);

    MAINMENU_BUT.setBoxWithBorderPosition(0, 0, 102, 160);
    MAINMENU_BUT.setBorderSize(0);
    MAINMENU_BUT.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(255, 255, 255), touchgfx::Color::getColorFromRGB(138, 138, 138), touchgfx::Color::getColorFromRGB(51, 102, 153));
    MAINMENU_BUT.setAlpha(6);
    MAINMENU_BUT.setAction(flexButtonCallback);
    MAINMENU_BUT.setPosition(70, 76, 102, 160);
    add(MAINMENU_BUT);
}

CharacterViewBase::~CharacterViewBase()
{

}

void CharacterViewBase::setupScreen()
{

}

void CharacterViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &MAINMENU_BUT)
    {
        //Interaction1
        //When MAINMENU_BUT clicked change screen to MainMenuScreen
        //Go to MainMenuScreen with no screen transition
        application().gotoMainMenuScreenScreenNoTransition();
    }
}
