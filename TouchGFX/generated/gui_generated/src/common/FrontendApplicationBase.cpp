/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <new>
#include <gui_generated/common/FrontendApplicationBase.hpp>
#include <gui/common/FrontendHeap.hpp>
#include <touchgfx/transitions/NoTransition.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <platform/driver/lcd/LCD16bpp.hpp>
#include <gui/mainmenuscreen_screen/MainMenuScreenView.hpp>
#include <gui/mainmenuscreen_screen/MainMenuScreenPresenter.hpp>
#include <gui/gamescreen_screen/GameScreenView.hpp>
#include <gui/gamescreen_screen/GameScreenPresenter.hpp>
#include <gui/backupscreen_screen/BackUpScreenView.hpp>
#include <gui/backupscreen_screen/BackUpScreenPresenter.hpp>
#include <gui/character_screen/CharacterView.hpp>
#include <gui/character_screen/CharacterPresenter.hpp>
#include <gui/character_2_screen/Character_2View.hpp>
#include <gui/character_2_screen/Character_2Presenter.hpp>
#include <gui/rewardscreen_screen/RewardScreenView.hpp>
#include <gui/rewardscreen_screen/RewardScreenPresenter.hpp>
#include <gui/sakuramainscreen_screen/SakuraMainScreenView.hpp>
#include <gui/sakuramainscreen_screen/SakuraMainScreenPresenter.hpp>
#include <gui/sakuragamescreen_screen/SakuraGameScreenView.hpp>
#include <gui/sakuragamescreen_screen/SakuraGameScreenPresenter.hpp>
#include <gui/narutogamescreen2_screen/NarutoGameScreen2View.hpp>
#include <gui/narutogamescreen2_screen/NarutoGameScreen2Presenter.hpp>
#include <gui/character1_screen/Character1View.hpp>
#include <gui/character1_screen/Character1Presenter.hpp>
#include <gui/sakurafinalscreen_screen/SakuraFinalScreenView.hpp>
#include <gui/sakurafinalscreen_screen/SakuraFinalScreenPresenter.hpp>
#include <gui/rewardfinalscreen_screen/RewardFinalScreenView.hpp>
#include <gui/rewardfinalscreen_screen/RewardFinalScreenPresenter.hpp>
#include <gui/character_final_screen/Character_FinalView.hpp>
#include <gui/character_final_screen/Character_FinalPresenter.hpp>
#include <gui/sponge_screen/SpongeView.hpp>
#include <gui/sponge_screen/SpongePresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
    touchgfx::Texts::setLanguage(GB);
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
}

/*
 * Screen Transition Declarations
 */

// MainMenuScreen

void FrontendApplicationBase::gotoMainMenuScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoMainMenuScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoMainMenuScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<MainMenuScreenView, MainMenuScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// GameScreen

void FrontendApplicationBase::gotoGameScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoGameScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoGameScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<GameScreenView, GameScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// BackUpScreen

void FrontendApplicationBase::gotoBackUpScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoBackUpScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoBackUpScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<BackUpScreenView, BackUpScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// Character

void FrontendApplicationBase::gotoCharacterScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoCharacterScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoCharacterScreenNoTransitionImpl()
{
    touchgfx::makeTransition<CharacterView, CharacterPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// Character_2

void FrontendApplicationBase::gotoCharacter_2ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoCharacter_2ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoCharacter_2ScreenNoTransitionImpl()
{
    touchgfx::makeTransition<Character_2View, Character_2Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// RewardScreen

void FrontendApplicationBase::gotoRewardScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoRewardScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoRewardScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<RewardScreenView, RewardScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// SakuraMainScreen

void FrontendApplicationBase::gotoSakuraMainScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoSakuraMainScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoSakuraMainScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<SakuraMainScreenView, SakuraMainScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// SakuraGameScreen

void FrontendApplicationBase::gotoSakuraGameScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoSakuraGameScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoSakuraGameScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<SakuraGameScreenView, SakuraGameScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// NarutoGameScreen2

void FrontendApplicationBase::gotoNarutoGameScreen2ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoNarutoGameScreen2ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoNarutoGameScreen2ScreenNoTransitionImpl()
{
    touchgfx::makeTransition<NarutoGameScreen2View, NarutoGameScreen2Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// Character1

void FrontendApplicationBase::gotoCharacter1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoCharacter1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoCharacter1ScreenNoTransitionImpl()
{
    touchgfx::makeTransition<Character1View, Character1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// SakuraFinalScreen

void FrontendApplicationBase::gotoSakuraFinalScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoSakuraFinalScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoSakuraFinalScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<SakuraFinalScreenView, SakuraFinalScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// RewardFinalScreen

void FrontendApplicationBase::gotoRewardFinalScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoRewardFinalScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoRewardFinalScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<RewardFinalScreenView, RewardFinalScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// Character_Final

void FrontendApplicationBase::gotoCharacter_FinalScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoCharacter_FinalScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoCharacter_FinalScreenNoTransitionImpl()
{
    touchgfx::makeTransition<Character_FinalView, Character_FinalPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// Sponge

void FrontendApplicationBase::gotoSpongeScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoSpongeScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoSpongeScreenNoTransitionImpl()
{
    touchgfx::makeTransition<SpongeView, SpongePresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}
